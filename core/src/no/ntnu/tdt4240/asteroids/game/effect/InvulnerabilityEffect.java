package no.ntnu.tdt4240.asteroids.game.effect;

import com.badlogic.ashley.core.Entity;
import com.badlogic.ashley.core.Family;
import com.badlogic.ashley.core.PooledEngine;
import com.badlogic.gdx.graphics.g2d.TextureRegion;

import no.ntnu.tdt4240.asteroids.entity.component.BulletClass;
import no.ntnu.tdt4240.asteroids.entity.component.DamageComponent;
import no.ntnu.tdt4240.asteroids.entity.component.EffectComponent;
import no.ntnu.tdt4240.asteroids.entity.component.HealthComponent;
import no.ntnu.tdt4240.asteroids.entity.component.ObstacleClass;
import no.ntnu.tdt4240.asteroids.entity.util.EffectTextureFactory;
import no.ntnu.tdt4240.asteroids.service.ServiceLocator;

import static no.ntnu.tdt4240.asteroids.entity.util.ComponentMappers.damageMapper;
import static no.ntnu.tdt4240.asteroids.entity.util.ComponentMappers.healthMapper;


public class InvulnerabilityEffect extends BaseEffect {

    private static final float DEFAULT_DURATION = 5;
    private DamageComponent damageComponent;
    private HealthComponent healthComponent;
    private Family oldHealthIgnore;

    @Override
    public void
    applyEffect(PooledEngine engine, Entity entity, EffectComponent effectComponent) {
        damageComponent = damageMapper.get(entity);
        if (damageComponent != null) {
            damageComponent.ignoreComponents = null;
        } else {
            damageComponent = engine.createComponent(DamageComponent.class);
            entity.add(damageComponent);
        }

        healthComponent = healthMapper.get(entity);
        if (healthComponent == null) {
            healthComponent = engine.createComponent(HealthComponent.class);
            entity.add(healthComponent);
        }
        oldHealthIgnore = healthComponent.ignoreComponents;
        healthComponent.ignoreComponents = Family.one(ObstacleClass.class, BulletClass.class).get();
    }

    @Override
    public void removeEffect(PooledEngine engine, Entity entity, EffectComponent effectComponent) {
        entity.remove(DamageComponent.class);
        healthComponent.ignoreComponents = oldHealthIgnore;
    }

    @Override
    public float getDuration() {
        return DEFAULT_DURATION;
    }

    @Override
    protected TextureRegion getEffectTexture() {
        return ServiceLocator.entityComponent.provideEffectTextureFactory().getInvulnerability();
    }
}
