package no.ntnu.tdt4240.asteroids.game.effect;

import com.badlogic.ashley.core.Component;
import com.badlogic.ashley.core.Entity;
import com.badlogic.ashley.core.PooledEngine;
import com.badlogic.gdx.Application;
import com.badlogic.gdx.Gdx;

import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentMatchers;

import no.ntnu.tdt4240.asteroids.AppComponent;
import no.ntnu.tdt4240.asteroids.entity.EntityComponent;
import no.ntnu.tdt4240.asteroids.entity.component.DamageComponent;
import no.ntnu.tdt4240.asteroids.entity.component.EffectComponent;
import no.ntnu.tdt4240.asteroids.entity.component.HealthComponent;
import no.ntnu.tdt4240.asteroids.entity.util.EffectTextureFactory;
import no.ntnu.tdt4240.asteroids.service.ServiceLocator;
import no.ntnu.tdt4240.asteroids.service.audio.AudioService;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

public class InvulnerabilityEffectTest {

    private PooledEngine engine;
    private Entity entity;
    private InvulnerabilityEffect fixture;
    private EffectComponent effectComponent;

    @Before
    public void setup() {
        Gdx.app = mock(Application.class);
        engine = mock(PooledEngine.class);
        when(engine.createComponent(HealthComponent.class)).thenReturn(new HealthComponent());
        when(engine.createComponent(DamageComponent.class)).thenReturn(new DamageComponent());
        ServiceLocator.appComponent = mock(AppComponent.class);
        when(ServiceLocator.getAppComponent().getAudioService()).thenReturn(mock(AudioService.class));
        ServiceLocator.entityComponent = mock(EntityComponent.class);
        when(ServiceLocator.getEntityComponent().getEffectTextureFactory()).thenReturn(mock(EffectTextureFactory.class));
        entity = mock(Entity.class);
        fixture = new InvulnerabilityEffect();
        effectComponent = mock(EffectComponent.class);
    }

    @Test
    public void applyEffect_validEffect_shouldApplyEffect() {
        fixture.applyEffect(engine, entity, effectComponent);
        verify(entity).add(any(DamageComponent.class));
        verify(entity).add(any(HealthComponent.class));
    }

    @Test
    public void removeEffect_validEffect_shouldRemoveEffect() {
        fixture.applyEffect(engine, entity, effectComponent);
        fixture.removeEffect(engine, entity, effectComponent);
        verify(entity).remove(ArgumentMatchers.<Class<? extends Component>>any());
        verify(entity).add(any(HealthComponent.class));
    }
}
